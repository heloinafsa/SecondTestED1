#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define TAMANHO 7

typedef struct No {
    int dado;
    struct No* direita;
    struct No* esquerda;
} No;

No* criarArvore() {
    return NULL;
}

int ArvoreVazia(No* raiz) {
    return raiz == NULL;
}

int getValor(No** no) {
    if ((*no) != NULL) {
        return (*no)->dado;
    }
}

void mostrarArvore(No* raiz) {
    if (!ArvoreVazia(raiz)) {
        printf("%p<-%d(%p)->%p\n\n", raiz->esquerda, raiz->dado, raiz, raiz->direita);
        printf("%d", getValor(&raiz->esquerda));
        mostrarArvore(raiz->esquerda);
        mostrarArvore(raiz->direita);

    }
}

void inserirDado(No** raiz, int dado) {
    if (*raiz == NULL) {
        *raiz = (No*) malloc(sizeof (No));
        (*raiz)->esquerda = NULL;
        (*raiz)->direita = NULL;
        (*raiz)->dado = dado;
    } else {
        if (dado < (*raiz)->dado) { //dado menor? vai pra esquerda
            //percorrer subNo da esquerda
            inserirDado(&(*raiz)->esquerda, dado);
        }
        if (dado > (*raiz)->dado) { //dado maior? vai pra direita
            //percorrer subNo da direita
            inserirDado(&(*raiz)->direita, dado);
        }
    }
}

void gerarArquivoDot(FILE** arquivoDot, No* raiz) {
    if (raiz != NULL) {
        char s1[20];
        char s2[20];
        if (getValor(&raiz->esquerda) != 0) {
            sprintf(s1, "%d:sw->%d [ label=\"esq\"];\n", raiz->dado, getValor(&raiz->esquerda));
            fprintf((*arquivoDot), "%s", s1);
        }
        if (getValor(&raiz->direita) != 0) {
            sprintf(s2, "%d:se->%d [ label=\"dir\"];\n", raiz->dado, getValor(&raiz->direita));
            fprintf((*arquivoDot), "%s", s2);
        }
        gerarArquivoDot(arquivoDot, raiz->esquerda);
        gerarArquivoDot(arquivoDot, raiz->direita);
    }
}

void main() {


    int i, j;
    int vetor[TAMANHO];
    int aux = 0;
    int matriz [7][7];


    for (int i = 0; i < TAMANHO; i++) {
        vetor[i] = rand() % 10;
    }
    for (int i = 0; i < 7; i++) {
        for (int j = 0; j < 7; j++) {
            printf("%d | %d", matriz[i][j]);

        }
        printf("\n");
    }

    while (i == j) {
        for (int i = 1; i < TAMANHO; i++) {
            for (int j = 0; j < TAMANHO - 1; j++) {
                if (vetor[j] > vetor[j + 1]) {
                    aux = vetor[j];
                    vetor[j] = vetor[j + 1];
                    vetor[j + 1] = aux;
                }
            }
        }

        if (i == j) {
            printf("%d\t", vetor[i]);
        }

    }
    No* raiz = criarArvore();
    srand(time(0));
    for (int i = 0; i < 50; i++) {
        inserirDado(&raiz, vetor[i]);
    }
    FILE* arquivoDot;
    arquivoDot = fopen("arvore.dot", "w");
    fprintf(arquivoDot, "%s", "digraph G {\nsplines=line;\n");
    gerarArquivoDot(&arquivoDot, raiz);
    fprintf(arquivoDot, "%s", "}\n");
    fclose(arquivoDot);
    free(raiz);
    system("dot -Tpng arvore.dot -o arvore.png");


}

